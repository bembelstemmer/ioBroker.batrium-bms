{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport dgram from \"node:dgram\";\r\nimport { ParserFacade } from \"./lib/parsers/parser-facade\";\r\nimport { MessageBaseData } from \"./lib/parsers/parser-base-data\";\r\n\r\nclass BatriumBms extends utils.Adapter {\r\n\r\n    private server: dgram.Socket;\r\n    private parserFacade: ParserFacade;\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: \"batrium-bms\",\r\n        });\r\n        this.on(\"ready\", this.onReady.bind(this));\r\n        this.on(\"unload\", this.onUnload.bind(this));\r\n\r\n        this.server = dgram.createSocket({ type: \"udp4\" });\r\n        this.parserFacade = new ParserFacade(this);\r\n    }\r\n\r\n    private async onReady(): Promise<void> {\r\n\r\n        this.setState(\"info.connection\", false, true);\r\n\r\n        this.server.on(\"error\", this.onServerError.bind(this));\r\n        this.server.on(\"listening\", this.onServerListening.bind(this));\r\n        this.server.on(\"message\", this.onServerMessage.bind(this));\r\n        this.server.on(\"close\", this.onServerClose.bind(this));\r\n        this.server.bind(parseInt(this.config.bindingport), this.config.bindingaddress);\r\n    }\r\n\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            this.server.close();\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private async onServerMessage(msg: Buffer, info: dgram.RemoteInfo): Promise<void> {\r\n        const data: MessageBaseData = await this.parserFacade.getMessageBaseData(msg);\r\n        this.log.debug(`MSG received from ${ info.address } MessageID:${ data.MessageId } SystemID:${ data.SystemId }`);\r\n        this.parserFacade.handleMessage(data.SystemId, data.MessageId, msg);\r\n    }\r\n\r\n    private async onServerListening(): Promise<void> {\r\n        const address = this.server.address();\r\n        const port = address.port;\r\n        const ipaddr = address.address;\r\n        this.log.info(`UDP Listening started on ${ipaddr}:${port}`);\r\n        this.setState(\"info.connection\", true, true);\r\n    }\r\n\r\n    private async onServerClose(): Promise<void> {\r\n        this.log.info(\"UDP Listener Port closed.\");\r\n    }\r\n\r\n    private onServerError(error: Error): void {\r\n        this.log.error(\"Error in listener: \" + error.message);\r\n        this.setState(\"info.connection\", false, true);\r\n        this.restart();\r\n    }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new BatriumBms(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new BatriumBms())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AACvB,wBAAkB;AAClB,2BAA6B;AAG7B,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAK5B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAE1C,SAAK,SAAS,kBAAAA,QAAM,aAAa,EAAE,MAAM,OAAO,CAAC;AACjD,SAAK,eAAe,IAAI,kCAAa,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAc,UAAyB;AAEnC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAE5C,SAAK,OAAO,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACrD,SAAK,OAAO,GAAG,aAAa,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAC7D,SAAK,OAAO,GAAG,WAAW,KAAK,gBAAgB,KAAK,IAAI,CAAC;AACzD,SAAK,OAAO,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACrD,SAAK,OAAO,KAAK,SAAS,KAAK,OAAO,WAAW,GAAG,KAAK,OAAO,cAAc;AAAA,EAClF;AAAA,EAEQ,SAAS,UAA4B;AACzC,QAAI;AACA,WAAK,OAAO,MAAM;AAClB,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAc,gBAAgB,KAAa,MAAuC;AAC9E,UAAM,OAAwB,MAAM,KAAK,aAAa,mBAAmB,GAAG;AAC5E,SAAK,IAAI,MAAM,qBAAsB,KAAK,qBAAuB,KAAK,sBAAwB,KAAK,UAAW;AAC9G,SAAK,aAAa,cAAc,KAAK,UAAU,KAAK,WAAW,GAAG;AAAA,EACtE;AAAA,EAEA,MAAc,oBAAmC;AAC7C,UAAM,UAAU,KAAK,OAAO,QAAQ;AACpC,UAAM,OAAO,QAAQ;AACrB,UAAM,SAAS,QAAQ;AACvB,SAAK,IAAI,KAAK,4BAA4B,UAAU,MAAM;AAC1D,SAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,EAC/C;AAAA,EAEA,MAAc,gBAA+B;AACzC,SAAK,IAAI,KAAK,2BAA2B;AAAA,EAC7C;AAAA,EAEQ,cAAc,OAAoB;AACtC,SAAK,IAAI,MAAM,wBAAwB,MAAM,OAAO;AACpD,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,SAAK,QAAQ;AAAA,EACjB;AAEJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,GAAC,MAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": ["dgram"]
}
