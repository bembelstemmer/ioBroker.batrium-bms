{
  "version": 3,
  "sources": ["../../../src/lib/parsers/parser-415a-CellNodeStatus.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport { Parser } from \"binary-parser\";\r\nimport { ParserCommon } from \"./parser-common\";\r\nimport { ParserInterface } from \"./parserinterface\";\r\n\r\ninterface Message_415a_CellNodeStatus_CellData {\r\n    ID: number;\r\n    USN: number;\r\n    MinCellVolt: number;\r\n    MaxCellVolt: number;\r\n    MinCellTemp: number;\r\n    BypassTemp: number;\r\n    BypassAmp: number;\r\n    Status: number;\r\n}\r\n\r\ninterface Message_415a_CellNodeStatus {\r\n    CmuRxOpStatusNodeID: number;\r\n    Records: number;\r\n    FirstNodeID: number;\r\n    LastNodeID: number;\r\n    nodes: Array<Message_415a_CellNodeStatus_CellData>;\r\n}\r\n\r\nexport class Parser_415a_CellNodeStatus extends ParserCommon implements ParserInterface {\r\n\r\n    private parser: Parser;\r\n    private subParser: Parser;\r\n    private initializedCellNodes: Array<number> = [];\r\n\r\n    public constructor(adapter: utils.AdapterInstance) {\r\n        super(adapter);\r\n        // Category    = Telemetry\r\n        // Object      = CellNodeItem\r\n        // Description = Cell node - array up to 16 nodes\r\n        // MsgLength   = variable\r\n        // Version     = 1\r\n        // Frequency   = 300 mS\r\n        // Support     = Current\r\n        // Valid to    = SW 1.0.29\r\n        this.adapter = adapter;\r\n        this.messageId = \"415a\";\r\n        this.messageName = \"Cell Node Status Limited\";\r\n        this.subParser = new Parser()\r\n            .uint8(\"ID\")\r\n            .uint8(\"USN\")\r\n            .int16le(\"MinCellVolt\",                 { formatter: (x) => {return x/1000;}})\r\n            .int16le(\"MaxCellVolt\",                 { formatter: (x) => {return x/1000;}})\r\n            .uint8(\"MinCellTemp\",                   { formatter: (x) => {return x-40;}}) // temperature \u00BAC\r\n            .uint8(\"BypassTemp\",                    { formatter: (x) => {return x-40;}}) // temperature \u00BAC\r\n            .int16le(\"BypassAmp\",                   { formatter: (x) => {return x/1000;}})\r\n            .uint8(\"Status\");   /* Choices NodeStatuses\r\n                None = 0,\r\n                HighVolt = 1,\r\n                HighTemp = 2,\r\n                Ok = 3,\r\n                Timeout = 4,\r\n                LowVolt = 5,\r\n                Disabled = 6,\r\n                InBypass = 7,\r\n                InitialBypass = 8,\r\n                FinalBypass = 9,\r\n                MissingSetup = 10,\r\n                NoConfig = 11,\r\n                CellOutLimits = 12, */\r\n\r\n        this.parser = new Parser()\r\n            .skip(8)\r\n            .uint8(\"CmuRxOpStatusNodeID\")\r\n            .uint8(\"Records\")\r\n            .uint8(\"FirstNodeID\")\r\n            .uint8(\"LastNodeID\")\r\n            .array(\"nodes\", {\r\n                type : this.subParser,\r\n                length : \"Records\"\r\n            });\r\n    }\r\n\r\n    public async initObjects(_systemId: number): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    private async initCellNode(systemId: number, id: number): Promise<void> {\r\n        this.adapter.log.debug(`Setting Cell${id}`);\r\n        await this.adapter?.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}`), {\r\n            type: \"device\",\r\n            common: {\r\n                name: \"Batrium Cell #\" + id.toString()\r\n            },\r\n            native: {},\r\n        });\r\n        await Promise.all([\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.ID`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"ID\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.USN`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"USN\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.MinCellVolt`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"MinCellVolt\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    unit: \"V\",\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.MaxCellVolt`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"MaxCellVolt\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    unit: \"V\",\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.MinCellTemp`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"MinCellTemp\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    unit: \"\u00B0C\",\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.BypassTemp`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"BypassTemp\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    unit: \"\u00B0C\",\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.BypassAmp`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"BypassAmp\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    unit: \"A\",\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, `${id}.Status`), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"Status\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: true,\r\n                    states: {\r\n                        \"0\": \"None\",\r\n                        \"1\": \"HighVolt\",\r\n                        \"2\": \"HighTemp\",\r\n                        \"3\": \"OK\",\r\n                        \"4\": \"Timeout\",\r\n                        \"5\": \"LowVolt\",\r\n                        \"6\": \"Disabled\",\r\n                        \"7\": \"InBypass\",\r\n                        \"8\": \"InitialBypass\",\r\n                        \"9\": \"FinalBypass\",\r\n                        \"10\": \"MissingSetup\",\r\n                        \"11\": \"NoConfig\",\r\n                        \"12\": \"CellOutLimits\",\r\n                    }\r\n                },\r\n                native: {},\r\n            })\r\n        ]);\r\n    }\r\n\r\n    private async setCellValues(systemId: number, cellData: Message_415a_CellNodeStatus_CellData): Promise<void> {\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.ID`), cellData.ID, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.USN`), cellData.USN, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.MinCellVolt`), cellData.MinCellVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.MaxCellVolt`), cellData.MaxCellVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.MinCellTemp`), cellData.MinCellTemp, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.BypassTemp`), cellData.BypassTemp, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.BypassAmp`), cellData.BypassAmp, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, `${cellData.ID}.Status`), cellData.Status, true);\r\n    }\r\n\r\n    public async handleMessage(systemId: number, msg: Buffer): Promise<void> {\r\n        if(!this.adapter.config[\"415a_active\"] || this.ratelimitTimeout) {\r\n            return;\r\n        }\r\n        this.ratelimitTimeout = this.adapter.setTimeout(() => {\r\n            this.ratelimitTimeout = null;\r\n        }, this.adapter.config[\"415a_ratelimit\"]);\r\n        const result: Message_415a_CellNodeStatus = this.parser.parse(msg);\r\n        result.nodes.forEach(async nodeData => {\r\n            if(!this.initializedCellNodes.includes(nodeData.ID)) {\r\n                await this.initCellNode(systemId, nodeData.ID);\r\n                this.initializedCellNodes.push(nodeData.ID);\r\n            }\r\n        });\r\n        result.nodes.forEach(async nodeData => {\r\n            this.setCellValues(systemId, nodeData);\r\n        });\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
