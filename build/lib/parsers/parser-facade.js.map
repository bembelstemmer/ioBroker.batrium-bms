{
  "version": 3,
  "sources": ["../../../src/lib/parsers/parser-facade.ts"],
  "sourcesContent": ["\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { ParserInterface } from \"./parserinterface\";\r\nimport { ParserBaseData, MessageBaseData } from \"./parser-base-data\";\r\nimport { Parser_5732_SystemDiscovery } from \"./parser-5732-SystemDiscovery\";\r\nimport { Parser_3233_LiveDisplay } from \"./parser-3233-LiveDisplay\";\r\nimport { Parser_6831_QuickSessionHist } from \"./parser-6831-QuickSessionHist\";\r\nimport { Parser_415a_CellNodeStatus } from \"./parser-415a-CellNodeStatus\";\r\nimport { Parser_4232_CellNodeFull } from \"./parser-4232-CellNodeFull\";\r\n\r\nexport class ParserFacade {\r\n    private parserMap: Map<string, ParserInterface>;\r\n    private adapter: utils.AdapterInstance\r\n    private parserBaseData: ParserBaseData;\r\n    private knownSystems: Array<string> = [];\r\n    private knownSystemMessages: Array<string> = [];\r\n\r\n    public constructor(adapter: utils.AdapterInstance) {\r\n        this.adapter = adapter;\r\n        this.parserBaseData = new ParserBaseData();\r\n        this.parserMap = new Map<string, ParserInterface>();\r\n        this.parserMap.set(\"3233\", new Parser_3233_LiveDisplay(this.adapter));\r\n        this.parserMap.set(\"415a\", new Parser_415a_CellNodeStatus(this.adapter));\r\n        this.parserMap.set(\"4232\", new Parser_4232_CellNodeFull(this.adapter));\r\n        this.parserMap.set(\"5732\", new Parser_5732_SystemDiscovery(this.adapter));\r\n        this.parserMap.set(\"6831\", new Parser_6831_QuickSessionHist(this.adapter));\r\n    }\r\n\r\n    public getMessageBaseData(buf: Buffer): MessageBaseData {\r\n        return this.parserBaseData.parse(buf);\r\n    }\r\n\r\n    private async createSystemNode(systemId: number): Promise<void> {\r\n        await this.adapter?.setObjectNotExistsAsync(`${ this.adapter?.name }.${ this.adapter.instance!.toString() }.${ systemId.toString() }`, {\r\n            type: \"device\",\r\n            common: {\r\n                name: \"Batrium Device #\" + systemId.toString()\r\n            },\r\n            native: {},\r\n        });\r\n    }\r\n\r\n    private async createSystemMessageNode(systemId: number, messageId: string): Promise<void> {2\r\n        await this.adapter?.setObjectNotExistsAsync(`${ this.adapter?.name }.${ this.adapter.instance!.toString() }.${ systemId.toString() }.${ messageId }`, {\r\n            type: \"channel\",\r\n            common: {\r\n                name: this.parserMap.get(messageId)?.getMessageName() ?? \"Unknown Type\"\r\n            },\r\n            native: {},\r\n        });\r\n    }\r\n\r\n    public async handleMessage(systemId: number, messageID: string, msg: Buffer): Promise<boolean> {\r\n        if(!this.parserMap.has(messageID)) {\r\n            this.adapter.log.debug(`Unknown MessageID ${ messageID } received`);\r\n            return false;\r\n        }\r\n        if(!this.knownSystems.includes(systemId.toString())) {\r\n            await this.createSystemNode(systemId);\r\n            this.knownSystems.push(systemId.toString());\r\n        }\r\n        const cachekey: string = systemId.toString() + \".\" + messageID;\r\n        if(!this.knownSystemMessages.includes(cachekey)) {\r\n            await this.createSystemMessageNode(systemId, messageID);\r\n            await this.parserMap.get(messageID)?.initObjects(systemId);\r\n            this.knownSystemMessages.push(cachekey);\r\n        }\r\n        return !!this.parserMap.get(messageID)?.handleMessage(systemId, msg);\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,8BAAgD;AAChD,yCAA4C;AAC5C,qCAAwC;AACxC,0CAA6C;AAC7C,wCAA2C;AAC3C,sCAAyC;AAElC,MAAM,aAAa;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAA8B,CAAC;AAAA,EAC/B,sBAAqC,CAAC;AAAA,EAEvC,YAAY,SAAgC;AAC/C,SAAK,UAAU;AACf,SAAK,iBAAiB,IAAI,uCAAe;AACzC,SAAK,YAAY,oBAAI,IAA6B;AAClD,SAAK,UAAU,IAAI,QAAQ,IAAI,uDAAwB,KAAK,OAAO,CAAC;AACpE,SAAK,UAAU,IAAI,QAAQ,IAAI,6DAA2B,KAAK,OAAO,CAAC;AACvE,SAAK,UAAU,IAAI,QAAQ,IAAI,yDAAyB,KAAK,OAAO,CAAC;AACrE,SAAK,UAAU,IAAI,QAAQ,IAAI,+DAA4B,KAAK,OAAO,CAAC;AACxE,SAAK,UAAU,IAAI,QAAQ,IAAI,iEAA6B,KAAK,OAAO,CAAC;AAAA,EAC7E;AAAA,EAEO,mBAAmB,KAA8B;AACpD,WAAO,KAAK,eAAe,MAAM,GAAG;AAAA,EACxC;AAAA,EAEA,MAAc,iBAAiB,UAAiC;AAhCpE;AAiCQ,YAAM,UAAK,YAAL,mBAAc,wBAAwB,IAAI,UAAK,YAAL,mBAAc,IAAK,IAAK,KAAK,QAAQ,SAAU,SAAS,CAAE,IAAK,SAAS,SAAS,CAAE,IAAI;AAAA,MACnI,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,qBAAqB,SAAS,SAAS;AAAA,MACjD;AAAA,MACA,QAAQ,CAAC;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAc,wBAAwB,UAAkB,WAAkC;AA1C9F;AA0C+F;AACvF,YAAM,UAAK,YAAL,mBAAc,wBAAwB,IAAI,UAAK,YAAL,mBAAc,IAAK,IAAK,KAAK,QAAQ,SAAU,SAAS,CAAE,IAAK,SAAS,SAAS,CAAE,IAAK,SAAU,IAAI;AAAA,MAClJ,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,OAAM,gBAAK,UAAU,IAAI,SAAS,MAA5B,mBAA+B,qBAA/B,YAAmD;AAAA,MAC7D;AAAA,MACA,QAAQ,CAAC;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAa,cAAc,UAAkB,WAAmB,KAA+B;AApDnG;AAqDQ,QAAG,CAAC,KAAK,UAAU,IAAI,SAAS,GAAG;AAC/B,WAAK,QAAQ,IAAI,MAAM,qBAAsB,SAAU,WAAW;AAClE,aAAO;AAAA,IACX;AACA,QAAG,CAAC,KAAK,aAAa,SAAS,SAAS,SAAS,CAAC,GAAG;AACjD,YAAM,KAAK,iBAAiB,QAAQ;AACpC,WAAK,aAAa,KAAK,SAAS,SAAS,CAAC;AAAA,IAC9C;AACA,UAAM,WAAmB,SAAS,SAAS,IAAI,MAAM;AACrD,QAAG,CAAC,KAAK,oBAAoB,SAAS,QAAQ,GAAG;AAC7C,YAAM,KAAK,wBAAwB,UAAU,SAAS;AACtD,cAAM,UAAK,UAAU,IAAI,SAAS,MAA5B,mBAA+B,YAAY;AACjD,WAAK,oBAAoB,KAAK,QAAQ;AAAA,IAC1C;AACA,WAAO,CAAC,GAAC,UAAK,UAAU,IAAI,SAAS,MAA5B,mBAA+B,cAAc,UAAU;AAAA,EACpE;AACJ;",
  "names": []
}
