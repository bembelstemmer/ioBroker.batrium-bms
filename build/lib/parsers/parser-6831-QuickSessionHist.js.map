{
  "version": 3,
  "sources": ["../../../src/lib/parsers/parser-6831-QuickSessionHist.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport { Parser } from \"binary-parser\";\r\nimport { ParserCommon } from \"./parser-common\";\r\nimport { ParserInterface } from \"./parserinterface\";\r\n\r\ninterface Message_6831_QuickSessionHist {\r\n    QuickSessionHistId: number;\r\n    QuickSessionHistTime: number;\r\n    QuickSessionHistSystemOpState: number;\r\n    QuickSessionHistControlLogic: number;\r\n    QuickSessionHistMinCellVolt: number;\r\n    QuickSessionHistMaxCellVolt: number;\r\n    QuickSessionHistAvgCellVolt: number;\r\n    QuickSessionHistAvgCellTemp: number;\r\n    QuickSessionHistSocHiRes: number;\r\n    QuickSessionHistShuntVolt: number;\r\n    QuickSessionHistShuntAmp: number;\r\n    QuickSessionHistNumOfCellsInBypass: number;\r\n}\r\n\r\nexport class Parser_6831_QuickSessionHist extends ParserCommon implements ParserInterface {\r\n\r\n    private parser: Parser;\r\n\r\n    public constructor(adapter: utils.AdapterInstance) {\r\n        super(adapter);\r\n        // Category    = Session history\r\n        // Object      = Quick\r\n        // MsgLength   = 32\r\n        // Description = Quick session history\r\n        // Version     = 1\r\n        // Frequency   = adhoc\r\n        // Support     = Current\r\n        // Created     = SW 1.0.29\r\n        this.adapter = adapter;\r\n        this.messageId = \"6831\";\r\n        this.messageName = \"Quick session history\";\r\n        this.parser = new Parser()\r\n            .skip(8)\r\n            .int16le(\"QuickSessionHistId\")\r\n            .uint32le(\"QuickSessionHistTime\") \t\t// Epoch  *** log key ***\r\n            .uint8(\"QuickSessionHistSystemOpState\") /* Choices\r\n                    Simulator = 0,   \t  // LED = rainbow pulse\r\n                    Idle = 1,        \t  // LED = green slow pulse\r\n                    Discharging = 2, \t  // LED = green solid\r\n                    SoC Empty = 3,   \t  // LED = green double blink\r\n                    Charging = 4,    \t  // LED = blue slow pulse\r\n                    Full = 5,        \t  // LED = blue double blink\r\n                    Timeout = 6,     \t  // LED = red solid\r\n                    Critical Pending = 7, // LED = red fast pulse\r\n                    Critical Offline = 8, // LED = red slow pulse\r\n                    Mqtt Offline = 9,     // LED = white blink\r\n                    Auth Setup = 10,      // LED = white solid\r\n                    Shunt Timeout = 11,   // LED = red solid  \t*/\r\n            .uint8( \"QuickSessionHistControlLogic\")\r\n            .int16le(\"QuickSessionHistMinCellVolt\",\t\t\t{ formatter: (x) => {return x/1000;}})\r\n            .int16le(\"QuickSessionHistMaxCellVolt\",\t\t\t{ formatter: (x) => {return x/1000;}})\r\n            .int16le(\"QuickSessionHistAvgCellVolt\",\t\t\t{ formatter: (x) => {return x/1000;}})\r\n            .uint8(  \"QuickSessionHistAvgCellTemp\",\t\t\t{ formatter: (x) => {return x-40;}})\t// temperature \u00BAC\r\n            .int16le(\"QuickSessionHistSocHiRes\",\t\t\t{ formatter: (x) => {return x/100;}})\t// percent\r\n            .int16le(\"QuickSessionHistShuntVolt\",\t\t\t{ formatter: (x) => {return x/100;}})\r\n            .floatle(\"QuickSessionHistShuntAmp\",\t\t\t{ formatter: (x) => {return x/1000;}})  // amp\r\n            .uint8(  \"QuickSessionHistNumOfCellsInBypass\");\r\n    }\r\n\r\n    public async initObjects(systemId: number): Promise<void> {\r\n        await Promise.all([\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistId\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistId\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: false,\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistTime\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistTime\",\r\n                    type: \"number\",\r\n                    role: \"date\",\r\n                    read: true,\r\n                    write: false,\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistSystemOpState\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistSystemOpState\",\r\n                    type: \"number\",\r\n                    role: \"info.status\",\r\n                    read: true,\r\n                    write: false,\r\n                    states: {\r\n                        \"0\": \"Simulator\",\r\n                        \"1\": \"Idle\",\r\n                        \"2\": \"Discharging\",\r\n                        \"3\": \"SoC Empty\",\r\n                        \"4\": \"Charging\",\r\n                        \"5\": \"Full\",\r\n                        \"6\": \"Timeout\",\r\n                        \"7\": \"Critical Pending\",\r\n                        \"8\": \"Critical Offline\",\r\n                        \"9\": \"Mqtt Offline\",\r\n                        \"10\": \"Auth Setup\",\r\n                        \"11\": \"Shunt Timeout\",\r\n                    }\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistControlLogic\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistControlLogic\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: false,\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistMinCellVolt\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistMinCellVolt\",\r\n                    type: \"number\",\r\n                    role: \"value.voltage\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"V\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistMaxCellVolt\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistMaxCellVolt\",\r\n                    type: \"number\",\r\n                    role: \"value.voltage\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"V\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistAvgCellVolt\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistAvgCellVolt\",\r\n                    type: \"number\",\r\n                    role: \"value.voltage\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"V\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistAvgCellTemp\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistAvgCellTemp\",\r\n                    type: \"number\",\r\n                    role: \"value.temperature\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"\u00B0C\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistSocHiRes\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistSocHiRes\",\r\n                    type: \"number\",\r\n                    role: \"value.battery\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"%\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistShuntVolt\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistShuntVolt\",\r\n                    type: \"number\",\r\n                    role: \"value.voltage\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"V\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistShuntAmp\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistShuntAmp\",\r\n                    type: \"number\",\r\n                    role: \"value.current\",\r\n                    read: true,\r\n                    write: false,\r\n                    unit: \"A\"\r\n                },\r\n                native: {},\r\n            }),\r\n            this.adapter.setObjectNotExistsAsync(this.getVariableName(systemId, \"QuickSessionHistNumOfCellsInBypass\"), {\r\n                type: \"state\",\r\n                common: {\r\n                    name: \"QuickSessionHistNumOfCellsInBypass\",\r\n                    type: \"number\",\r\n                    role: \"value\",\r\n                    read: true,\r\n                    write: false,\r\n                },\r\n                native: {},\r\n            }),\r\n        ]);\r\n    }\r\n\r\n    public async handleMessage(systemId: number, msg: Buffer): Promise<void> {\r\n        if(!this.adapter.config[\"6831_active\"] || this.ratelimitTimeout) {\r\n            return;\r\n        }\r\n        this.ratelimitTimeout = this.adapter.setTimeout(() => {\r\n            this.ratelimitTimeout = undefined;\r\n        }, this.adapter.config[\"6831_ratelimit\"]);\r\n        const result: Message_6831_QuickSessionHist = this.parser.parse(msg);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistId\"), result.QuickSessionHistId, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistTime\"), result.QuickSessionHistTime, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistSystemOpState\"), result.QuickSessionHistSystemOpState, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistControlLogic\"), result.QuickSessionHistControlLogic, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistMinCellVolt\"), result.QuickSessionHistMinCellVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistMaxCellVolt\"), result.QuickSessionHistMaxCellVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistAvgCellVolt\"), result.QuickSessionHistAvgCellVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistAvgCellTemp\"), result.QuickSessionHistAvgCellTemp, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistSocHiRes\"), result.QuickSessionHistSocHiRes, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistShuntVolt\"), result.QuickSessionHistShuntVolt, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistShuntAmp\"), result.QuickSessionHistShuntAmp, true);\r\n        this.adapter.setStateChangedAsync(this.getVariableName(systemId, \"QuickSessionHistNumOfCellsInBypass\"), result.QuickSessionHistNumOfCellsInBypass, true);\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
